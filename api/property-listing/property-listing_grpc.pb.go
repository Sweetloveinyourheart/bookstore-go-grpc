// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: property-listing/property-listing.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PropertyListingClient is the client API for PropertyListing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertyListingClient interface {
	GetAssets(ctx context.Context, in *GetAssetsRequest, opts ...grpc.CallOption) (*GetAssetsResponse, error)
	AddAsset(ctx context.Context, in *AddAssetRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	ModifyAsset(ctx context.Context, in *ModifyAssetRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	DisableAsset(ctx context.Context, in *DisableAssetRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	AddProperty(ctx context.Context, in *NewProperty, opts ...grpc.CallOption) (*ResultResponse, error)
}

type propertyListingClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertyListingClient(cc grpc.ClientConnInterface) PropertyListingClient {
	return &propertyListingClient{cc}
}

func (c *propertyListingClient) GetAssets(ctx context.Context, in *GetAssetsRequest, opts ...grpc.CallOption) (*GetAssetsResponse, error) {
	out := new(GetAssetsResponse)
	err := c.cc.Invoke(ctx, "/PropertyListing/GetAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyListingClient) AddAsset(ctx context.Context, in *AddAssetRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/PropertyListing/AddAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyListingClient) ModifyAsset(ctx context.Context, in *ModifyAssetRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/PropertyListing/ModifyAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyListingClient) DisableAsset(ctx context.Context, in *DisableAssetRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/PropertyListing/DisableAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyListingClient) AddProperty(ctx context.Context, in *NewProperty, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/PropertyListing/AddProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertyListingServer is the server API for PropertyListing service.
// All implementations must embed UnimplementedPropertyListingServer
// for forward compatibility
type PropertyListingServer interface {
	GetAssets(context.Context, *GetAssetsRequest) (*GetAssetsResponse, error)
	AddAsset(context.Context, *AddAssetRequest) (*ResultResponse, error)
	ModifyAsset(context.Context, *ModifyAssetRequest) (*ResultResponse, error)
	DisableAsset(context.Context, *DisableAssetRequest) (*ResultResponse, error)
	AddProperty(context.Context, *NewProperty) (*ResultResponse, error)
	mustEmbedUnimplementedPropertyListingServer()
}

// UnimplementedPropertyListingServer must be embedded to have forward compatible implementations.
type UnimplementedPropertyListingServer struct {
}

func (UnimplementedPropertyListingServer) GetAssets(context.Context, *GetAssetsRequest) (*GetAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssets not implemented")
}
func (UnimplementedPropertyListingServer) AddAsset(context.Context, *AddAssetRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAsset not implemented")
}
func (UnimplementedPropertyListingServer) ModifyAsset(context.Context, *ModifyAssetRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyAsset not implemented")
}
func (UnimplementedPropertyListingServer) DisableAsset(context.Context, *DisableAssetRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAsset not implemented")
}
func (UnimplementedPropertyListingServer) AddProperty(context.Context, *NewProperty) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProperty not implemented")
}
func (UnimplementedPropertyListingServer) mustEmbedUnimplementedPropertyListingServer() {}

// UnsafePropertyListingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertyListingServer will
// result in compilation errors.
type UnsafePropertyListingServer interface {
	mustEmbedUnimplementedPropertyListingServer()
}

func RegisterPropertyListingServer(s grpc.ServiceRegistrar, srv PropertyListingServer) {
	s.RegisterService(&PropertyListing_ServiceDesc, srv)
}

func _PropertyListing_GetAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyListingServer).GetAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PropertyListing/GetAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyListingServer).GetAssets(ctx, req.(*GetAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyListing_AddAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyListingServer).AddAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PropertyListing/AddAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyListingServer).AddAsset(ctx, req.(*AddAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyListing_ModifyAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyListingServer).ModifyAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PropertyListing/ModifyAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyListingServer).ModifyAsset(ctx, req.(*ModifyAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyListing_DisableAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyListingServer).DisableAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PropertyListing/DisableAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyListingServer).DisableAsset(ctx, req.(*DisableAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyListing_AddProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProperty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyListingServer).AddProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PropertyListing/AddProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyListingServer).AddProperty(ctx, req.(*NewProperty))
	}
	return interceptor(ctx, in, info, handler)
}

// PropertyListing_ServiceDesc is the grpc.ServiceDesc for PropertyListing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropertyListing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PropertyListing",
	HandlerType: (*PropertyListingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssets",
			Handler:    _PropertyListing_GetAssets_Handler,
		},
		{
			MethodName: "AddAsset",
			Handler:    _PropertyListing_AddAsset_Handler,
		},
		{
			MethodName: "ModifyAsset",
			Handler:    _PropertyListing_ModifyAsset_Handler,
		},
		{
			MethodName: "DisableAsset",
			Handler:    _PropertyListing_DisableAsset_Handler,
		},
		{
			MethodName: "AddProperty",
			Handler:    _PropertyListing_AddProperty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "property-listing/property-listing.proto",
}
