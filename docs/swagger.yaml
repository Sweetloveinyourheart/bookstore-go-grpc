basePath: /api/v1
definitions:
  dtos.ModifyAssets:
    properties:
      asset_type:
        enum:
        - category
        - amenity
        type: string
      icon_url:
        type: string
      name:
        type: string
    required:
    - asset_type
    type: object
  dtos.NewAssets:
    properties:
      asset_type:
        enum:
        - category
        - amenity
        type: string
      icon_url:
        type: string
      name:
        type: string
    required:
    - asset_type
    - icon_url
    - name
    type: object
  dtos.NewDestinationDTO:
    properties:
      city:
        maxLength: 250
        minLength: 3
        type: string
      country:
        maxLength: 250
        minLength: 3
        type: string
      lat:
        type: number
      long:
        type: number
    required:
    - city
    - country
    - lat
    - long
    type: object
  dtos.NewPropertyDTO:
    properties:
      amenity_id:
        type: integer
      category_id:
        type: integer
      description:
        minLength: 3
        type: string
      destination:
        $ref: '#/definitions/dtos.NewDestinationDTO'
      price:
        type: number
      title:
        maxLength: 250
        minLength: 3
        type: string
    required:
    - amenity_id
    - category_id
    - description
    - destination
    - price
    - title
    type: object
  dtos.SignInDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dtos.SignUpDTO:
    properties:
      birthday:
        type: string
      email:
        type: string
      fullName:
        type: string
      gender:
        enum:
        - Male
        - Female
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
    required:
    - email
    - fullName
    - password
    type: object
  handlers.HeathCheckResponse:
    properties:
      message:
        type: string
    type: object
  proto.SignInResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  proto.SignUpResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample Swagger API for a Go Gin application.
  title: Homify API
  version: "1.0"
paths:
  /assets:
    get:
      consumes:
      - application/json
      description: Get assets based on the provided asset type
      parameters:
      - description: Asset type to filter by
        in: query
        name: asset_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The assets list
          schema:
            type: object
        "400":
          description: Error
          schema:
            type: object
      summary: Get assets by asset type
      tags:
      - Assets
    post:
      consumes:
      - application/json
      description: Creates a new asset based on the provided JSON payload.
      operationId: addNewAsset
      parameters:
      - description: JSON payload containing data for the new asset
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.NewAssets'
      produces:
      - application/json
      responses:
        "201":
          description: The asset was created successfully
          schema:
            type: object
        "400":
          description: Failed to create the new asset due to validation errors or
            other issues
          schema:
            type: object
      security:
      - Authorization: []
      summary: Create a new asset
      tags:
      - Assets
  /assets/disable:
    put:
      description: Disables an existing asset based on the provided asset_id and asset_type.
      operationId: disableAnAsset
      parameters:
      - description: Asset ID to be disabled
        in: query
        name: asset_id
        required: true
        type: string
      - description: Type of the asset to be disabled
        in: query
        name: asset_type
        required: true
        type: string
      responses:
        "201":
          description: The asset was disabled successfully
          schema:
            type: object
        "400":
          description: Failed to disable the asset due to validation errors or other
            issues
          schema:
            type: object
      security:
      - Authorization: []
      summary: Disable an existing asset
      tags:
      - Assets
  /assets/modify:
    put:
      consumes:
      - application/json
      description: Modifies an existing asset based on the provided JSON payload.
      operationId: modifyExistingAsset
      parameters:
      - description: Asset id to modify
        in: query
        name: asset_id
        required: true
        type: string
      - description: JSON payload containing data for modifying the asset
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.ModifyAssets'
      produces:
      - application/json
      responses:
        "201":
          description: The asset was updated successfully
          schema:
            type: object
        "400":
          description: Failed to update the asset due to validation errors or other
            issues
          schema:
            type: object
      security:
      - Authorization: []
      summary: Modify an existing asset
      tags:
      - Assets
  /health:
    get:
      description: Returns a simple health check response indicating the status of
        the service.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HeathCheckResponse'
      summary: Health check endpoint
      tags:
      - Health check
  /property:
    post:
      consumes:
      - application/json
      description: Add a new property to the property listings.
      operationId: add-new-property
      parameters:
      - description: New Property object to be added
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.NewPropertyDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added the new property
          schema:
            type: object
      security:
      - Authorization: []
      summary: Add a new property
      tags:
      - Property
  /property/sync:
    put:
      consumes:
      - application/json
      description: Sync all the property to ES
      operationId: sync-properties
      produces:
      - application/json
      responses:
        "200":
          description: Successfully
          schema:
            type: object
      security:
      - Authorization: []
      summary: Sync all the property to ES
      tags:
      - Property
  /sign-in:
    post:
      consumes:
      - application/json
      description: Handles the user sign-in process by validating input and authenticating
        the user via gRPC.
      parameters:
      - description: User sign-in data in JSON format
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.SignInDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.SignInResponse'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
      summary: Handles user sign-in
      tags:
      - Authentication
  /sign-up:
    post:
      consumes:
      - application/json
      description: This endpoint allows users to sign up and create a new account.
        It expects a JSON payload containing user information.
      operationId: signUp
      parameters:
      - description: User information for registration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dtos.SignUpDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/proto.SignUpResponse'
        "400":
          description: Bad Request
          schema:
            type: object
      summary: Register a new user account
      tags:
      - Authentication
  /user:
    get:
      description: Get the user profile for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: object
        "401":
          description: unauthorized
          schema:
            type: object
      security:
      - Authorization: []
      summary: Get user profile
      tags:
      - Authentication
produces:
- application/json
schemes:
- http
securityDefinitions:
  Authorization:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
